{
    "id": 8416,
    "iid": 30,
    "project_id": 13083,
    "title": "Cleaner headers in Notification Emails",
    "description": "Make the informations available in the notification email headers (sender, recipient, subject, etc.) more readable and meaningful.\r\n\r\n* Remove the email subject prefix\r\n* Don't write the project namespace in email subjects\r\n* Write the issue/merge request title in the notification email subject\r\n* Make the email appear as sent from the action author (the actual email address is still `gitlab@gitlab.com`)\r\n\r\nFor instance, this is the notification email for a new issue comment before:\r\n\r\n> From: gitlab@gitlab.com\r\n> To: myemailaddress@gmail.com\r\n> Subject: GitLab | GitLab HQ / GitLab-Shell | New note for issue #1234\r\n\r\nAnd after :\r\n\r\n> From: Nick Brown &lt;gitlab@gitlab.com&gt;\r\n> To: myemailaddress@gmail.com\r\n> Subject: GitLab-Shell |  Add local update hook  (#1234)\r\n\r\nThe recipient of the notification can easily get the gist of the message without even opening it â€” just by looking at how it appears in her inbox. None of the actual email addresses (From, To, Reply-to) changes, just the display name.\r\n\r\nHaving a consistent subject for all notification emails sent about some resource also allow good email clients to group the discussion by thread (although grouping in Mail.app still needs some work).",
    "state": "merged",
    "created_at": "2014-02-19T17:37:10.000Z",
    "updated_at": "2014-02-25T13:34:08.000Z",
    "target_branch": "master",
    "source_branch": "cleaner-email-headers",
    "upvotes": 0,
    "downvotes": 0,
    "author": {
        "name": "Pierre de La Morinerie",
        "username": "pmorinerie",
        "id": 18967,
        "state": "active",
        "avatar_url": "https://gitlab.com/uploads/user/avatar/18967/avatar.png",
        "web_url": "https://gitlab.com/pmorinerie"
    },
    "assignee": null,
    "source_project_id": 30559,
    "target_project_id": 13083,
    "labels": [],
    "work_in_progress": false,
    "milestone": null,
    "merge_when_pipeline_succeeds": false,
    "merge_status": "can_be_merged",
    "sha": "96dded3ec8401e9832b3888338f37c846bd43583",
    "merge_commit_sha": null,
    "user_notes_count": 5,
    "approvals_before_merge": null,
    "should_remove_source_branch": null,
    "force_remove_source_branch": null,
    "squash": false,
    "web_url": "https://gitlab.com/gitlab-org/gitlab-ce/merge_requests/30",
    "subscribed": false,
    "changes": [
        {
            "old_path": "app/mailers/emails/issues.rb",
            "new_path": "app/mailers/emails/issues.rb",
            "a_mode": null,
            "b_mode": "100644",
            "diff": "--- a/app/mailers/emails/issues.rb\n+++ b/app/mailers/emails/issues.rb\n@@ -3,22 +3,27 @@ module Emails\n     def new_issue_email(recipient_id, issue_id)\n       @issue = Issue.find(issue_id)\n       @project = @issue.project\n-      mail(to: recipient(recipient_id), subject: subject(\"New issue ##{@issue.iid}\", @issue.title))\n+      mail(from: sender(@issue.author_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@issue.title} (##{@issue.iid})\"))\n     end\n \n-    def reassigned_issue_email(recipient_id, issue_id, previous_assignee_id)\n+    def reassigned_issue_email(recipient_id, issue_id, previous_assignee_id, updated_by_user_id)\n       @issue = Issue.find(issue_id)\n       @previous_assignee = User.find_by(id: previous_assignee_id) if previous_assignee_id\n       @project = @issue.project\n-      mail(to: recipient(recipient_id), subject: subject(\"Changed issue ##{@issue.iid}\", @issue.title))\n+      mail(from: sender(updated_by_user_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@issue.title} (##{@issue.iid})\"))\n     end\n \n     def closed_issue_email(recipient_id, issue_id, updated_by_user_id)\n       @issue = Issue.find issue_id\n       @project = @issue.project\n       @updated_by = User.find updated_by_user_id\n-      mail(to: recipient(recipient_id),\n-           subject: subject(\"Closed issue ##{@issue.iid}\", @issue.title))\n+      mail(from: sender(updated_by_user_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@issue.title} (##{@issue.iid})\"))\n     end\n \n     def issue_status_changed_email(recipient_id, issue_id, status, updated_by_user_id)\n@@ -26,8 +31,9 @@ module Emails\n       @issue_status = status\n       @project = @issue.project\n       @updated_by = User.find updated_by_user_id\n-      mail(to: recipient(recipient_id),\n-           subject: subject(\"Changed issue ##{@issue.iid}\", @issue.title))\n+      mail(from: sender(updated_by_user_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@issue.title} (##{@issue.iid})\"))\n     end\n   end\n end",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "old_path": "app/mailers/emails/merge_requests.rb",
            "new_path": "app/mailers/emails/merge_requests.rb",
            "a_mode": null,
            "b_mode": "100644",
            "diff": "--- a/app/mailers/emails/merge_requests.rb\n+++ b/app/mailers/emails/merge_requests.rb\n@@ -3,27 +3,35 @@ module Emails\n     def new_merge_request_email(recipient_id, merge_request_id)\n       @merge_request = MergeRequest.find(merge_request_id)\n       @project = @merge_request.project\n-      mail(to: recipient(recipient_id), subject: subject(\"New merge request ##{@merge_request.iid}\", @merge_request.title))\n+      mail(from: sender(@merge_request.author_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@merge_request.title} (!#{@merge_request.iid})\"))\n     end\n \n-    def reassigned_merge_request_email(recipient_id, merge_request_id, previous_assignee_id)\n+    def reassigned_merge_request_email(recipient_id, merge_request_id, previous_assignee_id, updated_by_user_id)\n       @merge_request = MergeRequest.find(merge_request_id)\n       @previous_assignee = User.find_by(id: previous_assignee_id) if previous_assignee_id\n       @project = @merge_request.project\n-      mail(to: recipient(recipient_id), subject: subject(\"Changed merge request ##{@merge_request.iid}\", @merge_request.title))\n+      mail(from: sender(updated_by_user_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@merge_request.title} (!#{@merge_request.iid})\"))\n     end\n \n     def closed_merge_request_email(recipient_id, merge_request_id, updated_by_user_id)\n       @merge_request = MergeRequest.find(merge_request_id)\n       @updated_by = User.find updated_by_user_id\n       @project = @merge_request.project\n-      mail(to: recipient(recipient_id), subject: subject(\"Closed merge request ##{@merge_request.iid}\", @merge_request.title))\n+      mail(from: sender(updated_by_user_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@merge_request.title} (!#{@merge_request.iid})\"))\n     end\n \n     def merged_merge_request_email(recipient_id, merge_request_id)\n       @merge_request = MergeRequest.find(merge_request_id)\n       @project = @merge_request.project\n-      mail(to: recipient(recipient_id), subject: subject(\"Accepted merge request ##{@merge_request.iid}\", @merge_request.title))\n+      mail(from: sender(@merge_request.author_id_of_changes),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@merge_request.title} (!#{@merge_request.iid})\"))\n     end\n   end\n \n@@ -57,7 +65,7 @@ module Emails\n   #   >> subject('Lorem ipsum', 'Dolor sit amet')\n   #   => \"GitLab Merge Request | Lorem ipsum | Dolor sit amet\"\n   def subject(*extra)\n-    subject = \"GitLab Merge Request |\"\n+    subject = \"Merge Request | \"\n     if @merge_request.for_fork?\n       subject << \"#{@merge_request.source_project.name_with_namespace}:#{merge_request.source_branch} >> #{@merge_request.target_project.name_with_namespace}:#{merge_request.target_branch}\"\n     else",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "old_path": "app/mailers/emails/notes.rb",
            "new_path": "app/mailers/emails/notes.rb",
            "a_mode": null,
            "b_mode": "100644",
            "diff": "--- a/app/mailers/emails/notes.rb\n+++ b/app/mailers/emails/notes.rb\n@@ -4,27 +4,35 @@ module Emails\n       @note = Note.find(note_id)\n       @commit = @note.noteable\n       @project = @note.project\n-      mail(to: recipient(recipient_id), subject: subject(\"Note for commit #{@commit.short_id}\", @commit.title))\n+      mail(from: sender(@note.author_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@commit.title} (#{@commit.short_id})\"))\n     end\n \n     def note_issue_email(recipient_id, note_id)\n       @note = Note.find(note_id)\n       @issue = @note.noteable\n       @project = @note.project\n-      mail(to: recipient(recipient_id), subject: subject(\"Note for issue ##{@issue.iid}\"))\n+      mail(from: sender(@note.author_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@issue.title} (##{@issue.iid})\"))\n     end\n \n     def note_merge_request_email(recipient_id, note_id)\n       @note = Note.find(note_id)\n       @merge_request = @note.noteable\n       @project = @note.project\n-      mail(to: recipient(recipient_id), subject: subject(\"Note for merge request ##{@merge_request.iid}\"))\n+      mail(from: sender(@note.author_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"#{@merge_request.title} (!#{@merge_request.iid})\"))\n     end\n \n     def note_wall_email(recipient_id, note_id)\n       @note = Note.find(note_id)\n       @project = @note.project\n-      mail(to: recipient(recipient_id), subject: subject(\"Note on wall\"))\n+      mail(from: sender(@note.author_id),\n+           to: recipient(recipient_id),\n+           subject: subject(\"Note on wall\"))\n     end\n   end\n end",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "old_path": "app/mailers/emails/projects.rb",
            "new_path": "app/mailers/emails/projects.rb",
            "a_mode": null,
            "b_mode": "100644",
            "diff": "--- a/app/mailers/emails/projects.rb\n+++ b/app/mailers/emails/projects.rb\n@@ -22,7 +22,9 @@ module Emails\n       @diffs   = compare.diffs\n       @branch  = branch\n \n-      mail(to: recipient, subject: subject(\"New push to repository\"))\n+      mail(from: sender(author_id),\n+           to: recipient,\n+           subject: subject(\"New push to repository\"))\n     end\n   end\n end",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "old_path": "app/mailers/notify.rb",
            "new_path": "app/mailers/notify.rb",
            "a_mode": null,
            "b_mode": "100644",
            "diff": "--- a/app/mailers/notify.rb\n+++ b/app/mailers/notify.rb\n@@ -15,16 +15,33 @@ class Notify < ActionMailer::Base\n   default_url_options[:port]     = Gitlab.config.gitlab.port unless Gitlab.config.gitlab_on_standard_port?\n   default_url_options[:script_name] = Gitlab.config.gitlab.relative_url_root\n \n-  default from: Gitlab.config.gitlab.email_from\n+  default from: Proc.new { default_sender_address.format }\n   default reply_to: \"noreply@#{Gitlab.config.gitlab.host}\"\n \n-  # Just send email with 3 seconds delay\n+  # Just send email with 2 seconds delay\n   def self.delay\n     delay_for(2.seconds)\n   end\n \n   private\n \n+  # The default email address to send emails from\n+  def default_sender_address\n+    address = Mail::Address.new(Gitlab.config.gitlab.email_from)\n+    address.display_name = \"GitLab\"\n+    address\n+  end\n+\n+  # Return an email address that displays the name of the sender.\n+  # Only the displayed name changes; the actual email address is always the same.\n+  def sender(sender_id)\n+    if sender = User.find(sender_id)\n+      address = default_sender_address\n+      address.display_name = sender.name\n+      address.format\n+    end\n+  end\n+\n   # Look up a User by their ID and return their email address\n   #\n   # recipient_id - User ID\n@@ -43,21 +60,21 @@ class Notify < ActionMailer::Base\n   # Examples\n   #\n   #   >> subject('Lorem ipsum')\n-  #   => \"GitLab | Lorem ipsum\"\n+  #   => \"Lorem ipsum\"\n   #\n   #   # Automatically inserts Project name when @project is set\n   #   >> @project = Project.last\n   #   => #<Project id: 1, name: \"Ruby on Rails\", path: \"ruby_on_rails\", ...>\n   #   >> subject('Lorem ipsum')\n-  #   => \"GitLab | Ruby on Rails | Lorem ipsum \"\n+  #   => \"Ruby on Rails | Lorem ipsum \"\n   #\n   #   # Accepts multiple arguments\n   #   >> subject('Lorem ipsum', 'Dolor sit amet')\n-  #   => \"GitLab | Lorem ipsum | Dolor sit amet\"\n+  #   => \"Lorem ipsum | Dolor sit amet\"\n   def subject(*extra)\n-    subject = \"GitLab\"\n-    subject << (@project ? \" | #{@project.name_with_namespace}\" : \"\")\n-    subject << \" | \" + extra.join(' | ') if extra.present?\n+    subject = \"\"\n+    subject << \"#{@project.name} | \" if @project\n+    subject << extra.join(' | ') if extra.present?\n     subject\n   end\n end",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "old_path": "app/services/notification_service.rb",
            "new_path": "app/services/notification_service.rb",
            "a_mode": null,
            "b_mode": "100644",
            "diff": "--- a/app/services/notification_service.rb\n+++ b/app/services/notification_service.rb\n@@ -257,7 +257,7 @@ class NotificationService\n     recipients.delete(current_user)\n \n     recipients.each do |recipient|\n-      mailer.send(method, recipient.id, target.id, target.assignee_id_was)\n+      mailer.send(method, recipient.id, target.id, target.assignee_id_was, current_user.id)\n     end\n   end\n ",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "old_path": "config/initializers/devise.rb",
            "new_path": "config/initializers/devise.rb",
            "a_mode": null,
            "b_mode": "100644",
            "diff": "--- a/config/initializers/devise.rb\n+++ b/config/initializers/devise.rb\n@@ -4,7 +4,7 @@ Devise.setup do |config|\n   # ==> Mailer Configuration\n   # Configure the e-mail address which will be shown in Devise::Mailer,\n   # note that it will be overwritten if you use your own mailer class with default \"from\" parameter.\n-  config.mailer_sender = Gitlab.config.gitlab.email_from\n+  config.mailer_sender = \"GitLab <#{Gitlab.config.gitlab.email_from}>\"\n \n \n   # Configure the class responsible to send e-mails.",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "old_path": "spec/mailers/notify_spec.rb",
            "new_path": "spec/mailers/notify_spec.rb",
            "a_mode": null,
            "b_mode": "100644",
            "diff": "--- a/spec/mailers/notify_spec.rb\n+++ b/spec/mailers/notify_spec.rb\n@@ -4,6 +4,7 @@ describe Notify do\n   include EmailSpec::Helpers\n   include EmailSpec::Matchers\n \n+  let(:gitlab_sender) { Gitlab.config.gitlab.email_from }\n   let(:recipient) { create(:user, email: 'recipient@example.com') }\n   let(:project) { create(:project) }\n \n@@ -13,18 +14,28 @@ describe Notify do\n     end\n   end\n \n+  shared_examples 'an email sent from GitLab' do\n+    it 'is sent from GitLab' do\n+      sender = subject.header[:from].addrs[0]\n+      sender.display_name.should eq('GitLab')\n+      sender.address.should eq(gitlab_sender)\n+    end\n+  end\n+\n   describe 'for new users, the email' do\n     let(:example_site_path) { root_path }\n     let(:new_user) { create(:user, email: 'newguy@example.com', created_by_id: 1) }\n \n     subject { Notify.new_user_email(new_user.id, new_user.password) }\n \n+    it_behaves_like 'an email sent from GitLab'\n+\n     it 'is sent to the new user' do\n       should deliver_to new_user.email\n     end\n \n     it 'has the correct subject' do\n-      should have_subject /^gitlab \\| Account was created for you$/i\n+      should have_subject /^Account was created for you$/i\n     end\n \n     it 'contains the new user\\'s login name' do\n@@ -47,12 +58,14 @@ describe Notify do\n \n     subject { Notify.new_user_email(new_user.id, new_user.password) }\n \n+    it_behaves_like 'an email sent from GitLab'\n+\n     it 'is sent to the new user' do\n       should deliver_to new_user.email\n     end\n \n     it 'has the correct subject' do\n-      should have_subject /^gitlab \\| Account was created for you$/i\n+      should have_subject /^Account was created for you$/i\n     end\n \n     it 'contains the new user\\'s login name' do\n@@ -73,12 +86,14 @@ describe Notify do\n \n     subject { Notify.new_ssh_key_email(key.id) }\n \n+    it_behaves_like 'an email sent from GitLab'\n+\n     it 'is sent to the new user' do\n       should deliver_to key.user.email\n     end\n \n     it 'has the correct subject' do\n-      should have_subject /^gitlab \\| SSH key was added to your account$/i\n+      should have_subject /^SSH key was added to your account$/i\n     end\n \n     it 'contains the new ssh key title' do\n@@ -114,17 +129,24 @@ describe Notify do\n \n   context 'for a project' do\n     describe 'items that are assignable, the email' do\n+      let(:current_user) { create(:user, email: \"current@email.com\") }\n       let(:assignee) { create(:user, email: 'assignee@example.com') }\n       let(:previous_assignee) { create(:user, name: 'Previous Assignee') }\n \n       shared_examples 'an assignee email' do\n+        it 'is sent as the author' do\n+          sender = subject.header[:from].addrs[0]\n+          sender.display_name.should eq(current_user.name)\n+          sender.address.should eq(gitlab_sender)\n+        end\n+\n         it 'is sent to the assignee' do\n           should deliver_to assignee.email\n         end\n       end\n \n       context 'for issues' do\n-        let(:issue) { create(:issue, assignee: assignee, project: project ) }\n+        let(:issue) { create(:issue, author: current_user, assignee: assignee, project: project ) }\n \n         describe 'that are new' do\n           subject { Notify.new_issue_email(issue.assignee_id, issue.id) }\n@@ -132,7 +154,7 @@ describe Notify do\n           it_behaves_like 'an assignee email'\n \n           it 'has the correct subject' do\n-            should have_subject /#{project.name} \\| New issue ##{issue.iid} \\| #{issue.title}/\n+            should have_subject /#{project.name} \\| #{issue.title} \\(##{issue.iid}\\)/\n           end\n \n           it 'contains a link to the new issue' do\n@@ -141,14 +163,18 @@ describe Notify do\n         end\n \n         describe 'that have been reassigned' do\n-          before(:each) { issue.stub(:assignee_id_was).and_return(previous_assignee.id) }\n-\n-          subject { Notify.reassigned_issue_email(recipient.id, issue.id, previous_assignee.id) }\n+          subject { Notify.reassigned_issue_email(recipient.id, issue.id, previous_assignee.id, current_user) }\n \n           it_behaves_like 'a multiple recipients email'\n \n+          it 'is sent as the author' do\n+            sender = subject.header[:from].addrs[0]\n+            sender.display_name.should eq(current_user.name)\n+            sender.address.should eq(gitlab_sender)\n+          end\n+\n           it 'has the correct subject' do\n-            should have_subject /Changed issue ##{issue.iid} \\| #{issue.title}/\n+            should have_subject /#{issue.title} \\(##{issue.iid}\\)/\n           end\n \n           it 'contains the name of the previous assignee' do\n@@ -165,12 +191,17 @@ describe Notify do\n         end\n \n         describe 'status changed' do\n-          let(:current_user) { create(:user, email: \"current@email.com\") }\n           let(:status) { 'closed' }\n           subject { Notify.issue_status_changed_email(recipient.id, issue.id, status, current_user) }\n \n+          it 'is sent as the author' do\n+            sender = subject.header[:from].addrs[0]\n+            sender.display_name.should eq(current_user.name)\n+            sender.address.should eq(gitlab_sender)\n+          end\n+\n           it 'has the correct subject' do\n-            should have_subject /Changed issue ##{issue.iid} \\| #{issue.title}/i\n+            should have_subject /#{issue.title} \\(##{issue.iid}\\)/i\n           end\n \n           it 'contains the new status' do\n@@ -189,7 +220,7 @@ describe Notify do\n       end\n \n       context 'for merge requests' do\n-        let(:merge_request) { create(:merge_request, assignee: assignee, source_project: project, target_project: project) }\n+        let(:merge_request) { create(:merge_request, author: current_user, assignee: assignee, source_project: project, target_project: project) }\n \n         describe 'that are new' do\n           subject { Notify.new_merge_request_email(merge_request.assignee_id, merge_request.id) }\n@@ -197,7 +228,7 @@ describe Notify do\n           it_behaves_like 'an assignee email'\n \n           it 'has the correct subject' do\n-            should have_subject /New merge request ##{merge_request.iid}/\n+            should have_subject /#{merge_request.title} \\(!#{merge_request.iid}\\)/\n           end\n \n           it 'contains a link to the new merge request' do\n@@ -214,14 +245,18 @@ describe Notify do\n         end\n \n         describe 'that are reassigned' do\n-          before(:each) { merge_request.stub(:assignee_id_was).and_return(previous_assignee.id) }\n-\n-          subject { Notify.reassigned_merge_request_email(recipient.id, merge_request.id, previous_assignee.id) }\n+          subject { Notify.reassigned_merge_request_email(recipient.id, merge_request.id, previous_assignee.id, current_user.id) }\n \n           it_behaves_like 'a multiple recipients email'\n \n+          it 'is sent as the author' do\n+            sender = subject.header[:from].addrs[0]\n+            sender.display_name.should eq(current_user.name)\n+            sender.address.should eq(gitlab_sender)\n+          end\n+\n           it 'has the correct subject' do\n-            should have_subject /Changed merge request ##{merge_request.iid}/\n+            should have_subject /#{merge_request.title} \\(!#{merge_request.iid}\\)/\n           end\n \n           it 'contains the name of the previous assignee' do\n@@ -245,6 +280,8 @@ describe Notify do\n       let(:user) { create(:user) }\n       subject { Notify.project_was_moved_email(project.id, user.id) }\n \n+      it_behaves_like 'an email sent from GitLab'\n+\n       it 'has the correct subject' do\n         should have_subject /Project was moved/\n       end\n@@ -265,6 +302,9 @@ describe Notify do\n                                    project: project,\n                                    user: user) }\n       subject { Notify.project_access_granted_email(users_project.id) }\n+\n+      it_behaves_like 'an email sent from GitLab'\n+\n       it 'has the correct subject' do\n         should have_subject /Access to project was granted/\n       end\n@@ -285,6 +325,12 @@ describe Notify do\n       end\n \n       shared_examples 'a note email' do\n+        it 'is sent as the author' do\n+          sender = subject.header[:from].addrs[0]\n+          sender.display_name.should eq(note_author.name)\n+          sender.address.should eq(gitlab_sender)\n+        end\n+\n         it 'is sent to the given recipient' do\n           should deliver_to recipient.email\n         end\n@@ -324,7 +370,7 @@ describe Notify do\n         it_behaves_like 'a note email'\n \n         it 'has the correct subject' do\n-          should have_subject /Note for commit #{commit.short_id}/\n+          should have_subject /#{commit.title} \\(#{commit.short_id}\\)/\n         end\n \n         it 'contains a link to the commit' do\n@@ -342,7 +388,7 @@ describe Notify do\n         it_behaves_like 'a note email'\n \n         it 'has the correct subject' do\n-          should have_subject /Note for merge request ##{merge_request.iid}/\n+          should have_subject /#{merge_request.title} \\(!#{merge_request.iid}\\)/\n         end\n \n         it 'contains a link to the merge request note' do\n@@ -360,7 +406,7 @@ describe Notify do\n         it_behaves_like 'a note email'\n \n         it 'has the correct subject' do\n-          should have_subject /Note for issue ##{issue.iid}/\n+          should have_subject /#{issue.title} \\(##{issue.iid}\\)/\n         end\n \n         it 'contains a link to the issue note' do\n@@ -377,6 +423,8 @@ describe Notify do\n \n     subject { Notify.group_access_granted_email(membership.id) }\n \n+    it_behaves_like 'an email sent from GitLab'\n+\n     it 'has the correct subject' do\n       should have_subject /Access to group was granted/\n     end\n@@ -401,6 +449,8 @@ describe Notify do\n \n     subject { ActionMailer::Base.deliveries.last }\n \n+    it_behaves_like 'an email sent from GitLab'\n+\n     it 'is sent to the new user' do\n       should deliver_to 'new-email@mail.com'\n     end\n@@ -421,6 +471,12 @@ describe Notify do\n \n     subject { Notify.repository_push_email(project.id, 'devs@company.name', user.id, 'master', compare) }\n \n+    it 'is sent as the author' do\n+      sender = subject.header[:from].addrs[0]\n+      sender.display_name.should eq(user.name)\n+      sender.address.should eq(gitlab_sender)\n+    end\n+\n     it 'is sent to recipient' do\n       should deliver_to 'devs@company.name'\n     end",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        },
        {
            "old_path": "spec/services/notification_service_spec.rb",
            "new_path": "spec/services/notification_service_spec.rb",
            "a_mode": null,
            "b_mode": "100644",
            "diff": "--- a/spec/services/notification_service_spec.rb\n+++ b/spec/services/notification_service_spec.rb\n@@ -137,11 +137,11 @@ describe NotificationService do\n       end\n \n       def should_email(user_id)\n-        Notify.should_receive(:reassigned_issue_email).with(user_id, issue.id, issue.assignee_id)\n+        Notify.should_receive(:reassigned_issue_email).with(user_id, issue.id, issue.assignee_id, @u_disabled.id)\n       end\n \n       def should_not_email(user_id)\n-        Notify.should_not_receive(:reassigned_issue_email).with(user_id, issue.id, issue.assignee_id)\n+        Notify.should_not_receive(:reassigned_issue_email).with(user_id, issue.id, issue.assignee_id, @u_disabled.id)\n       end\n     end\n \n@@ -201,11 +201,11 @@ describe NotificationService do\n       end\n \n       def should_email(user_id)\n-        Notify.should_receive(:reassigned_merge_request_email).with(user_id, merge_request.id, merge_request.assignee_id)\n+        Notify.should_receive(:reassigned_merge_request_email).with(user_id, merge_request.id, merge_request.assignee_id, merge_request.author_id)\n       end\n \n       def should_not_email(user_id)\n-        Notify.should_not_receive(:reassigned_merge_request_email).with(user_id, merge_request.id, merge_request.assignee_id)\n+        Notify.should_not_receive(:reassigned_merge_request_email).with(user_id, merge_request.id, merge_request.assignee_id, merge_request.author_id)\n       end\n     end\n ",
            "new_file": false,
            "renamed_file": false,
            "deleted_file": false
        }
    ]
}